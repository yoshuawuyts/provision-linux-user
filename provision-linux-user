#!/bin/sh
# shellcheck disable=SC2088

# Provision a new user on a linux system with a minimal set of configuration.
main () {
  # find command
  while true; do
    case "$1" in
      -h|--help) usage && exit 1 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  # verify arg count
  if [ $# != 1 ]; then
    printf "Error: ssh-remote-name required\n"
    usage && exit 2
  fi

  remote="$1"

  assert_dep "ssh"
  assert_dep "scp"

  printf "creating directories on %s\n" "$remote"
  create_ssh_dir "$remote" "~/db"
  create_ssh_dir "$remote" "~/image"
  create_ssh_dir "$remote" "~/log"
  create_ssh_dir "$remote" "~/script"
  create_ssh_dir "$remote" "~/service"
  create_ssh_dir "$remote" "~/tmp"

  printf "copying files to %s\n" "$remote"
  copy_files "./templates" "$remote"
}

usage () {
  printf "usage: provision-linux-user <ssh-remote-name>\n"
}

assert_dep () {
  "$1" --help > /dev/null 2>&1
  [ $? -eq 0 ] && return
  [ $? -ne 0 ] && man "$1" > /dev/null
  [ $? -ne 0 ] && printf "dependency %s not found\n" "$1" && exit 1
}

# copy all files in ./templates to remote host
copy_files () {
  dir="$1"; remote="$2"
  find "$dir" | while read infile; do
    [ -e "$infile" ] || break
    [ -d "$infile" ] && continue
    outfile="$(echo "$infile" | sed 's|^\./templates/||g')"
    outfile="$(echo "$outfile" | sed 's/^\_/\./g')"
    scp -p "$infile" "$remote":~/"$outfile"
  done
}

# shellcheck disable=SC2029
create_ssh_dir () {
  remote="$1"
  remotedir="$2"
  ssh "$1" "mkdir -p $remotedir"
}

# reorder args and pass to main()
getopt -T > /dev/null
if [ "$?" -eq 4 ]; then args="$(getopt --long help --options h -- "$*")"
else args="$(getopt h "$*")"; fi
[ ! $? -eq 0 ] && { usage && exit 2; }
eval set -- "$args"
main "$@"
